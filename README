# **Quasitek Teacher Backend Management System Specification User Manual**

- Program Introduction
- Program Deployment
    - Database Environment Setup
    - Basic Environment Setup
    - Connecting Azure Data Studio to Your Azure Server
    - Connecting with Azure Database
- Program Architecture and Flow

## 1. Program Introduction

This backend website allows teachers to manage their classes, courses, students, and records. The data and details of each record are sent back from the VR device through the previously mentioned Log API. Moreover, this website is done using the ASP .NET Framework, specifically, the MVC framework, coupled with Azure as the database management system 

## 2. Program Deployment Methods

1. Database Environment Setup
    1. For this project, I’m using Microsoft Azure to manage the servers and databases, which are using SQL, but any database system should do the work.  
        
        ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/0daa7dc9-bbf4-4459-9de1-1807f3811fbc/image.png)
        
    2. In Azure, create a server by entering the **server name**, choosing the **server location**, and choosing your desired **authentication method**. For this project, I’m using “Microsoft Entra-only authentication”. Also, set the **subscription and resource group**, which will be used for the cost and billing of your database server. 
        
        ![Screenshot 2024-08-28 at 8.55.29 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/a9338fe2-136f-431d-b36d-9b7cfb1969ef/Screenshot_2024-08-28_at_8.55.29_PM.png)
        
    3. Next, create your database by entering your **database name**. Also, to reduce cost, select “No Elastic Pool” for the **SQL elastic pool** option, “Development” for the Workload environment. Last, select your desired **Backup storage redundancy** option.
        
        ![Screenshot 2024-08-28 at 9.07.19 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/52cff9a5-9b3f-4b9d-ac49-938066ebf51a/Screenshot_2024-08-28_at_9.07.19_PM.png)
        
    - Last, for the next four setting categories, **Networking, Security, Additional settings, and Tags**, select your preference.
    - After all the above is done, go to **Review + Create** and create your server and database.
2. Basic Environment Setup 
    1. Download **VS code** as the code editor and **Azure Data Studio** as the database management system 
        
        ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/601062cf-f019-4a4b-a41f-17c8f2bf993d/image.png)
        
        ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/ad6f97bb-7a02-4fa1-a808-8323d05bd5d1/image.png)
        
    2. Next, go to https://dotnet.microsoft.com/en-us/download to **download ASP .NET**. Check your installation by running the following command:
        
        ```bash
        dotnet --version
        ```
        
        If the installation succeeded, you should see version 8.0.100 or higher outputted:
        
        ```bash
        8.0.100
        ```
        
    3. Next, open VS Code and in the terminal, create a new directory in your desired path. Then, run the following to view all the templates that ASP .NET supports
        
        ```bash
        dotnet new list
        ```
        
        For this project, we’re using the **MVC (Model-View-Controller) framework**, so in your project, run 
        
        ```bash
        dotnet new mvc
        ```
        
    4. Next, go to **Extensions** on the sidebar, and download the following extensions:
        1. .NET Install Tool
        2. C# Dev Kit
        3. NuGet Package Manager
    5. Last, downloads the following **NuGet Packages**, so after you install these NuGet packages, you can use dependency injection to inject their services into your code. P.S, the following is what your `projectName.csproj` should look like after the installations. 
        
        ```html
        <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="12.0.1" />
        <PackageReference Include="EPPlus" Version="7.2.2" />
        <PackageReference Include="Flurl.Http" Version="4.0.2" />
        <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="8.0.7" />
        <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.0-preview.7.23375.4" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0-preview.7.23375.4" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.0-preview.7.23375.4" />
        <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.0-preview.7.23375.4" />
        <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
        <PackageReference Include="Swashbuckle.AspNetCore" Version="6.7.0" />
        <PackageReference Include="System.Web.Helpers.Crypto" Version="3.2.3" />
        <PackageReference Include="Microsoft.AspNetCore.App" />
        <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.0" />
        ```
        
3. Connecting Azure Data Studio to Your Azure Server
    1. In the top-left corner dropdown, click the leftmost icon to add a connection
        
        ![Screenshot 2024-08-28 at 10.18.54 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/c25f912a-344f-46bf-b39c-26d5ffc30eeb/Screenshot_2024-08-28_at_10.18.54_PM.png)
        
    2. You should see the following pop-up: 
        
        ![Screenshot 2024-08-28 at 10.12.44 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/e0cfa574-5d12-474d-9ada-f292e317cdc9/Screenshot_2024-08-28_at_10.12.44_PM.png)
        
    3. For the server, go back to the Overview page in your Azure database and copy the **Server Name**
        
        ![Screenshot 2024-08-28 at 10.23.14 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/75399d50-1e74-4aca-9046-2b176ce29908/Screenshot_2024-08-28_at_10.23.14_PM.png)
        
    4. Paste it in the pop-up and fill out the rest of the form, then press **Connect** on the bottom right corner. 
4. Connecting with Azure Database
    1. To connect your project with your azure database, go to the **Overview page** of your database
        
        ![Screenshot 2024-08-28 at 10.02.16 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/f2c8e898-232d-4112-ae9f-61f6c30a4318/Screenshot_2024-08-28_at_10.02.16_PM.png)
        
    2. Next, click on **Show database connection strings** next to **Connection string**
        
        ![Screenshot 2024-08-28 at 10.03.43 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/f04df13b-acc8-422e-873b-9d5d05eb8fa3/Screenshot_2024-08-28_at_10.03.43_PM.png)
        
    3. Then, copy the first link, which is ADO.NET (Microsoft Entra passwordless authentication)
        
        ![Screenshot 2024-08-28 at 10.05.44 PM.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/ec50601c-a8c0-46ef-b57c-7091dcb1eed0/63a9cff4-3f70-431a-b068-4193cc28cca4/Screenshot_2024-08-28_at_10.05.44_PM.png)
        
    4. Next, paste the connection string into your `appsettings.Development.json` and `appsettings.json` files (they should be in the top level of your project folder). It should look like the following:
        
        ```json
        "ConnectionStrings": {
            "DefaultConnection": "Server=tcp:quasitek-web-app.database.windows.net,1433;Initial Catalog=quasitek;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Default;"
          },
        ```
        
    5. Next, in your `Program.cs` (This should also be in the top level of your project folder), add the following code: 
        
        ```
        builder.Services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
        ```
        
        Your `Program.cs` should look like this: 
        
        ```csharp
        using Microsoft.EntityFrameworkCore;
        using quasitekWeb.Data;
        
        var builder = WebApplication.CreateBuilder(args);
        
        // Register the database context with the dependency injection container 
        builder.Services.AddDbContext<ApplicationDbContext>(options =>
            options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
        
        var app = builder.Build();
        
        app.Run();
        ```
        
    6. Next, inside your **Data folder**, add a new file called `ApplicationDbContext.cs` , then add the following line:
        
        ```csharp
        using quasitekWeb.Models;
        using Microsoft.EntityFrameworkCore;
        
        namespace quasitekWeb.Data;
        
        // Creates a class called ApplicationDbContext that inherits from DbContext
        // DbContext is a class from Entity Framework Core that allows you to interact with a database.
        public class ApplicationDbContext: DbContext{
            // Constructor that takes in an instance of DbContextOptions and passes it to the base class constructor (DbContext)
            public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { 
        
            }
        
            // DbSet properties that represent tables in the database (For example, Student) 
            public DbSet<Student> Students { get; set; }
        }
        ```
        
        For this example. your Azure database should have a **data table** called `Students`
        
    7. Next, in the terminal, run the following: 
        
        ```bash
        dotnet ef migrations add InitialCreate
        ```
        
        This command is configuring and applying migrations to ensure your database schema is in sync with your entity models. Also run the following: 
        
        ```bash
        dotnet ef database update
        ```
        
        This command updates the database to reflect the schema defined in your migration.
        
    8. Last, in your **Student Controller**, add a new file called, `StudentController.cs` , then add the following line:
        
        ```csharp
        namespace quasitekWeb.Controllers;
        public class StudentController : Controller
        {
        	private ApplicationDbContext _db;
        	
        	public ClassesController(ApplicationDbContext db){
        		_db = db;
        	}
        }
        ```
        
        Using the example above, you can now use create classes that can access or manipulate database logic that is located in your Azure Data Studio: 
        
        ```csharp
        [HttpGet]
        public IActionResult Index()
        {
        	var students = _db.Students.ToList();
          return View(students);
        }
        ```
        

## 3. Program Architecture and Flow

```mermaid
graph TD
    UI[User Interface] --> Login[Login Page]
    UI[User Interface] --> Dashboard[Dashboard]

    Dashboard --> ClassesCtrl[ClassesController]
    Dashboard --> CoursesCtrl[CourseController]
    Dashboard --> StudentsCtrl[StudentController]
    Dashboard --> LogsCtrl[RecordLogController]

    ClassesCtrl --> DbContext[ApplicationDbContext]
    CoursesCtrl --> DbContext[ApplicationDbContext]
    StudentsCtrl --> DbContext[ApplicationDbContext]
    LogsCtrl --> DbContext[ApplicationDbContext]

    DbContext --> Model
    
    Model --> DB[(Azure SQL Database)]

    ClassesCtrl --> View[View]
    CoursesCtrl --> View[View]
    StudentsCtrl --> View[View]
    LogsCtrl --> View[View]

    View --> UI

```

1. **UI Interaction**:
    - The user interacts with the UI through the Login Page and Dashboard. These interactions result in requests being sent to the respective controllers.
2. **Controller Processing**:
    - Each controller processes the request, such as creating a new class, retrieving a list of students, or updating course information.
3. **DbContext Role**:
    - The `ApplicationDbContext` is used by the controllers to interact with the database. It manages the retrieval and storage of data as defined by the models.
    - For example, if the `StudentsController` needs to add a new student, it uses the `ApplicationDbContext` to insert a new record into the `Students` table.
4. **Model Mapping**:
    - The `ApplicationDbContext` maps models to database tables, ensuring that operations on models result in the correct SQL queries being executed against the database.
5. **Database Storage**:
    - The Azure SQL Database stores all the data as specified by the models. Any changes made through the controllers and `ApplicationDbContext` are reflected in the database.
6. **View Rendering**:
    - After the controller processes the data, it sends the data to the view. The view then renders the data into HTML, which is sent back to the client (user’s browser) to be displayed.
7. **End**:
    - This cycle repeats as the user continues interacting with the application, making requests that the controllers handle and respond to by interacting with the database through the `ApplicationDbContext` and models.

```mermaid
graph TD
    VR[VR Device] --> API[Log API]
    
    API --> Controller[Log API Controller]
    
    Controller --> ILogRepo[ILogRepository Interface]
    
    ILogRepo --> Repo[LogRepository]

    Repo --> DbContext[ApplicationDbContext]

    DbContext --> Model[Model e.g., Teacher, Student, Class]
    
    Model --> DB[(Azure SQL Database)]

```

1. **VR Device (VR)**:
    - The VR device collects data (Student’s testing score and details) and sends it as a JSON string to the Log API.
2. **Log API (API)**:
    - This is the entry point where the VR device sends its data. The Log API receives the data and forwards it to the `LogApiController` for processing.
3. **Log API Controller (Controller)**:
    - The `LogApiController` handles incoming requests from the Log API. It uses the `ILogRepository` interface to interact with the underlying repository for data processing.
    - The controller's responsibility includes validating incoming data, managing responses, and ensuring the correct repository methods are called.
4. **ILogRepository Interface (ILogRepo)**:
    - `ILogRepository` is an interface that defines the contract or set of methods that the `LogRepository` must implement.
    - This layer provides abstraction, allowing the controller to interact with the repository without needing to know the specific implementation details. This is useful for dependency injection, testing, and maintaining loose coupling in the codebase.
5. **LogRepository (Repo)**:
    - The `LogRepository` implements the `ILogRepository` interface. It contains the actual logic for processing the incoming JSON data.
    - The repository interacts with the `ApplicationDbContext` to perform CRUD operations on the database, such as saving logs, updating records, and querying related data.
6. **ApplicationDbContext (DbContext)**:
    - The `ApplicationDbContext` acts as a bridge between the repository and the database.
    - It provides an interface for interacting with the database using the Entity Framework Core, mapping the models (e.g., `Teacher`, `Student`, `Class`) to the corresponding tables in the Azure SQL Database.
    - This context is responsible for managing database connections, tracking changes, and persisting data.
7. **Model (Model)**:
    - Models like `Teacher`, `Student`, and `Class` define the structure of data being processed and stored.
    - These models are mapped to database tables, and they are used by the `ApplicationDbContext` to interact with the database.
8. **Azure SQL Database (DB)**:
    - The database layer where all the application data, including logs, teacher details, student records, and class information, is stored.
    - The database is managed through SQL queries generated by Entity Framework Core based on the model definitions.
9. **End**:
    - This represents the conclusion of the data processing workflow. The data sent from the VR device has been successfully received, processed, validated, and stored in the database, or an appropriate error response has been generated.
